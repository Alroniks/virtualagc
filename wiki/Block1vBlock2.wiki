#summary Detailed differences between block 1 and block 2 AGC

http://virtualagc.googlecode.com/svn/trunk/Apollo32.png 

|| This page is very new and doesn't yet contain much useful content. ||

<wiki:toc max_depth="2" />

== Introduction ==

The "block 1" AGC used in unmanned Apollo missions, and which would have been used for the Apollo 1 mission, is very similar to the "block 2" AGC used in all of the manned missions.  But it also differs in a number of details that affect programs written for the block 1 computers, as well as the implementation of the assembler and CPU simulator.  The block 1 DSKY is also quite different in physical appearance from the block 2 DSKY.

This wiki page is intended to described all of the differences in adequate detail to guide implementation changes in the Virtual AGC yaYUL, yaAGC, and yaDSKY(2) programs, as well as to provide guidance for a programmer familiar with block 2 systems to write block 1 programs.


== Documentation for Consultation ==

  * Language definition:
    * Block 1 machine language is defined in document [http://www.ibiblio.org/apollo/hrst/archive/1008.pdf R-393].
    * Block 2 machine language is defined in [http://www.ibiblio.org/apollo/hrst/archive/1689.pdf Memo #9], as supplemented by the [http://www.ibiblio.org/apollo/NARA-SW/E-2052.pdf AGC4 Basic Training Manual].
  * (More later)


== Differences Between Block I and Block II Basic Assembly Language ==

At the source level, the Block I basic language is essentially a subset of the Block II basic language, with a few exceptions.

The common instructions (at the source-code level) between Block 1 and Block 2 are:  AD, CAF, CCS, COM, CS, DEC, DOUBLE, DV, EXTEND, INDEX, INHINT, MASK, MP, NDX, NOOP, OVIND, OVSK, RELINT, RESUME, RETURN, SQUARE, SU, TC, TCR, TCAA, TS, and XCH.  The entire set of i/o channel instructions from Block 2 (such as READ, WRITE, ROR, WOR, RAND, WAND, etc.) is missing from Block 1, since the Block 1 computer uses a memory-mapped i/o system rather than having a separate i/o address space.

Note, however, that some of the exceptional instructions which have been assigned special meanings or given special shorthand mnemonics are not quite the same between Block I and Block II, as follows:

|| *Shorthand Mnemonic* || *In Block 1* || *In Block 2* || *Comment* ||
|| BBCON              || (missing)  || OCT 66100   || ||
|| COM                || CS A       || CS A        || ||
|| DCOM               || (missing)  || DCS A       || ||
|| DDOUBL             || (missing)  || DAS A       || ||
|| DOUBLE             || AD A       || AD A        || ||
|| DTCB               || (missing)  || DXCH Z      || ||
|| DTCF               || (missing)  || DXCH 4      || ||
|| EXTEND             || INDEX 5777 || TC 6        || Additionally, the programmer is expected to have preloaded address 5777 with the value 47777. ||
|| INHINT             || INDEX 17   || TC 4        || ||
|| NOOP               || XCH A      || (depends on memory region) || ||
|| OVSK               || TS A       || TS A        || ||
|| RELINT             || INDEX 16   || TC 3        || ||
|| RESUME             || INDEX 25   || INDEX 17    || ||
|| RETURN             || TC Q       || TC Q        || ||
|| SQUARE             || MP A       || MP A        || ||
|| TCAA               || TS Z       || TS Z        || ||
|| XAQ                || TC A       || (missing)   || ||
|| XLQ                || (missing)  || TC L        || ||
|| XXALQ              || (missing)  || TC A        || ||
|| ZL                 || (missing)  || LXCH 7      || ||
|| ZQ                 || (missing)  || QXCH 7      || ||

In general, the differences in the table above wouldn't be significant _if_ the shorthand mnemonics were always used, since the assembler would automatically substitute the correct equivalent.  In very old code, however, one sometimes sees forms like INDEX 17 used directly rather than the short-form INHINT (in Block 1) or RESUME (in Block 2), and in these cases Block 1 code would not run as expected on a Block 2 AGC, or vice-versa.

Though basically forward-compatible at the source-code level, various instructions assemble to different binary machine-code in Block 1 than in Block 2.  We won't elaborate those differences here, since you can find them in the linked reference documents.  This is usually a matter of complete indifference, since the assembler will substitute the correct binary values.  _However_, there is one case in which it is important, and that is the case in which the coder has essentially hand-assembled the code and provides numerical values for the opcodes in place of the normal mnemonics.  This is sometimes seen in very old code, where you might see an instruction like

{{{
        3       VARIABLE
        # In Block 1 this is the same as
        XCH     VARIABLE
        # In Block 2 this is the same as
        CA      VARIABLE
}}}

As far as pseudo-ops are concerned, we can't really be sure what the complete set of supported pseudo-ops is for Block 1, since there is no document that defines them.  (Indeed, this is even partially true for Block 2, since a few pseudo-ops appearing in actual Block 2 source code are not defined in any known document.)  The only large example of Block 1 code which is presently accessible is the Apollo 4 program, Solarium 55.  In examining Solarium 55, we conclude that with one exception the Block 1 pseudo-ops are a compatible but greatly reduced subset of Block 2 pseudo-ops, as follows:  =, 2DEC, 2DEC`*`, 2OCT, ADRES, BANK, CADR, DEC, EQUALS, ERASE, OCT, OCTAL, SETLOC.  Note that the Block 1 memory space had no "super-banks" (fixed-memory banks 40, 41, 43, and 43), so there was no need for any pseudo-ops like SBANK whose essential purpose was to deal with super-banks.

The exception mentioned above is that Block 1 has a pseudo-op XCADR which does not exist in Block 2.  The purpose of XCADR is TBD.

== Interpreter-Language Differences ==

According to E-1077, MOD-3C (i.e. AGC3) had an interpreter facility, so it's probably safe to assume AGC4 did. The real question is if the pseudo-instruction set changed. The Block II interpreter instruction set is shown below (Colossus249, p1098). 

|| *Name* || *Description*  ||
|| ABVALABS || Length of vector or magnitude of scalar. ||
|| ARCSIN || Arc sine. ||
|| ARCCOS || Arc cosine. ||
|| AXC    || Address to INDEX complemented. ||
|| AXT    || Address to INDEX true. ||
|| BDDV   || DP divide into. ||
|| BDSU   || DP subtract from. ||
|| BOV(B) || Branch on overflow to Basic or Interpreter. ||
|| BVSU   || Vector subtract from. ||
|| BZE/GOTO || Branch zero and goto. ||
|| BPL/BMN  || Branch plus and branch minus. ||
|| CALL/ITA || Call and store QPRET. ||
|| CCALL  || Computed call. ||
|| CGOTO  || Computed goto. ||
|| COMP   || Complement vector or scalar. ||
|| COSINE || Cosine. ||
|| DAD    || DP add. ||
|| DDV    || DP divide by. ||
|| DLOAD  || Load MPAC with a DP scalar. ||
|| DMP1   || DP multiply. ||
|| DMPR   || DP multiply and round. ||
|| DOT    || Vector dot product. ||
|| DSQ    || DP square. ||
|| DSU    || DP subtract. ||
|| GSHIFT || General shift instruction. ||
|| INCR   || Increment INDEX register. ||
|| LXA    || Load INDEX from erasable. ||
|| LXC    || Load INDEX from complement of erasable. ||
|| MXV    || Matrix post-multiplied by vector. ||
|| PDDL   || Push down MPAC and load DP. ||
|| PDVL   || Push down MPAC and load vector. ||
|| PUSH   || Push down MPAC. ||
|| SETPD  || Set push down pointer (direct only). ||
|| ROUND  || Round to DP. ||
|| RTB/BHIZ || Return To Basic and Branch Hi Zero. ||
|| RVQ    || Return via QPRET. ||
|| SIGN   || Complement MPAC (V or SC) if X negative. ||
|| SINE   || Sine. ||
|| SLOAD  || Load MPAC in single precision. ||
|| SQRT   || Square root. ||
|| SSP    || Set single precision into X. ||
|| STADR  || Push up on store code. ||
|| STCALL || Store and do a call. || 
|| STODL  || Store MPAC and reload it in DP with the next address. || 
|| STOVL  || Store MPAC and reload a vector. || 
|| STORE  || Store MPAC. || 
|| SW/    || Switch instructions and available. ||
|| SXA    || Store index in erasable. ||
|| TAD    || Triple-precision add to MPAC. ||
|| TIX    || Transfer on INDEX. ||
|| TLOAD  || Load MPAC with triple precision. ||
|| TSLC   || Normalize MPAC (scalar only). ||
|| UNIT   || Unit vector. ||
|| V/SC   || Vector divided by a scalar. ||
|| VAD    || Vector add. ||
|| VDEF   || Vector define. ||
|| VLOAD  || Load MPAC with a vector. ||
|| VPROJ  || Vector projection. ||
|| VSQ    || Square of length of vector. ||
|| VSU    || Vector subtract. ||
|| VXM    || Matrix pre-multiplied by vector. ||
|| VXSC   || Vector times scalar. || 
|| VXV    || Vector cross product. ||
|| XAD    || INDEX register add from erasable. ||
|| XCHX   || Exchange INDEX with erasable. ||
|| XSU    || INDEX subtract from erasable. ||

== Register Differences ==
  * Central registers
|| *Address* || *Type*    || *Block I*  || *Block II* || *Comment* ||
|| 00000     || Flip-flop || A          || A          || ||
|| 00001     || Flip-flop || Q          || L          || ||
|| 00002     || Flip-flop || Z          || Q          || ||
|| 00003     || Flip-flop || LP         || EB         || ||
|| 00004     || Flip-flop || IN0        || FB         || IN registers replaced by i/p channels on Block II. ||
|| 00005     || Flip-flop || IN1        || Z          || ||
|| 00006     || Flip-flop || IN2        || BB         || ||
|| 00007     || Flip-flop || IN3        || Zeros      || ||
|| 00010     || Flip-flop || OUT0       || ARUPT      || OUT registers replaced by o/p channels on Block II. ||
|| 00011     || Flip-flop || OUT1       || LRUPT      || ||
|| 00012     || Flip-flop || OUT2       || QRUPT      || ||
|| 00013     || Flip-flop || OUT3       || (spare)    || ||
|| 00014     || Flip-flop || OUT4       || (spare)    || ||
|| 00015     || Flip-flop || BANK       || ZRUPT      || ||
|| 00016     || Flip-flop || RELINT     || BBRUPT     || No bits in Block I register. || 
|| 00017     || Flip-flop || INHINT     || BRUPT      || No bits in Block I register. || 
|| 00020     || Erasable  || CYR        || CYR        || ||
|| 00021     || Erasable  || SR         || SR         || ||
|| 00022     || Erasable  || CYL        || CYL        || ||
|| 00023     || Erasable  || SL         || EDOP       || ||
|| 00024     || Erasable  || ZRUPT      || Counter    || Supposed to be 20 counters, yet Memo#9 p4 lists range as 024-057 which is 33D? E-2052 lists 024-060 which is 34D. ||
|| 00025     || Erasable  || BRUPT      || Counter    || ||
|| 00026     || Erasable  || ARUPT      || Counter    || ||
|| 00027     || Erasable  || QRUPT      || Counter    || ||
|| 00030     || Erasable  || Counter    || Counter    || Supposed to be 20 counters, yet R-393 p3-2 lists range as 030-056 which is 22D? ||
||   to      ||           ||            ||            || ||
|| 00056     || Erasable  || Counter    || Counter    || ||
|| 00057     || Erasable  || Erasable   || Counter    || ||
|| 00060     || Erasable  || Erasable   || Erasable?  || Counter in Block II? ||
|| 00061     || Erasable  || Erasable   || Erasable   || ||

  * Counter registers (according to John Pultorak):
    * Block 1: begin either at address 30 or 34 octal (with document R-393 being ambiguous about this).

|| *Address* || *Name*   || *Comment* || (Source: R-393) 
|| 00034     || OVCTR    || ||
|| 00035     || TIME 1   || ||
|| 00036     || TIME 2   || ||
|| 00037     || TIME 3   || ||
|| 00040     || TIME 4   || ||
|| 00041     || UPLINK   || ||
|| 00042     || OUTCR I  || ||
|| 00043     || OUTCR II || ||
|| 00044     || PIPA X   || ||
|| 00045     || PIPA Y   || ||
|| 00046     || PIPA Z   || ||
|| 00047     || CDU X    || ||
|| 00050     || CDU Y    || ||
|| 00051     || CDU Z    || ||
|| 00052     || OPT X    || ||
|| 00053     || OPT Y    || ||
|| 00054     || TRKR X   || ||
|| 00055     || TRKR Y   || ||
|| 00056     || TRKR R   || ||

    * Block 2: begin at address 24 (octal).

|| *Address* || *Name*   || *Comment* || (Source: E-2052)
|| 00024     || TIME 2   || Elapsed time. ||
|| 00025     || TIME 1   || Elapsed time. ||
|| 00026     || TIME 3   || Wait-list. ||
|| 00027     || TIME 4   || T4RUPT. ||
|| 00030     || TIME 5   || Digital Auto Pilot. ||
|| 00031     || TIME 6   || Fine time for clocking. ||
|| 00032     || CDU X    || Inner gimbal. ||
|| 00033     || CDU Y    || Middle gimbal. ||
|| 00034     || CDU Z    || Outer gimbal. ||
|| 00035     || OPT Y    || Optics shaft (or radar). ||
|| 00036     || OPT X    || Optics shaft (or radar). ||
|| 00037     || PIPA X   || X stable member, change in velocity. ||
|| 00040     || PIPA Y   || Y stable member, change in velocity. ||
|| 00041     || PIPA Z   || Z stable member, change in velocity. ||
|| 00042     || RHCP     || Spare in CSM. LM rotational hand controller pitch input. ||
|| 00043     || RHCY     || Spare in CSM. LM rotational hand controller yaw input. ||
|| 00044     || RHCR     || Spare in CSM. LM rotational hand controller roll input. ||
|| 00045     || INLINK   || Uplink (up-telemetry). ||
|| 00046     || RNRAD    || Rendezvous & landing radar data. Parallel to serial conversion. ||
|| 00047     || Gyro CTR || Outcounter for Gyros. Drift Compensation and Fine Align. ||
|| 00050     || CDUXCMD  || Outcounter for CDUs. Used for changing the DAC Error Counter in CDU. ||
|| 00051     || CDUYCMD  || Outcounter for CDUs. Used for changing the DAC Error Counter in CDU. ||
|| 00052     || CDUZCMD  || Outcounter for CDUs. Used for changing the DAC Error Counter in CDU. ||
|| 00053     || OPTYCMD  || Outcounter for Optics (or Radar). ||
|| 00054     || OPTXCMD  || Outcounter for Optics (or Radar). ||
|| 00055     || Spare Outlink || Parallel to serial LEM and CSM telemetry. ||
|| 00056     || Spare Outlink || Parallel to serial LEM and CSM telemetry. ||
|| 00057     || Spare Outlink || Parallel to serial LEM and CSM telemetry. ||
|| 00060     || (ALTM)   || Altitude meter, drives inertial data display for altitude on LEM. ||

== I/O Differences ==

(Block I used registers for I/O while Block II used channels; this should be described here.)


== Other Memory-Map Differences ==

  * TIME1 and TIME2 variables (according to John Pultorak):
    * Block 1:  TIME1 is at the lower address.
    * Block 2:  TIME1 is at the higher address.

  * Program start and interrupt-vector table (according to John Pultorak):
    * Block 1:  Program start is address 2000 and remainder of interrupt vectors begin at 2004.
    * Block 2:  Program start (GOPROG) is at address 4000 and the remainder of the interrupt vectors begin at 4004.

 
== Uplink/Downlink Protocol Differences ==

(If any.)


== AGC/DSKY Interface Differences ==

(If any.)


== DSKY Appearance ==

Please refer instead to the [http://www.ibiblio.org/apollo/yaDSKY.html Virtual AGC website].